<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blog.keik.info</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.keik.info/"/>
  <updated>2016-02-28T09:37:05.145Z</updated>
  <id>http://blog.keik.info/</id>
  
  <author>
    <name>keik</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java とフロントエンドの付き合い方、それとチュートリアル</title>
    <link href="http://blog.keik.info/2016/02/28/java-with-frontend/"/>
    <id>http://blog.keik.info/2016/02/28/java-with-frontend/</id>
    <published>2016-02-27T15:44:37.000Z</published>
    <updated>2016-02-28T09:37:05.145Z</updated>
    
    <content type="html">&lt;p&gt;ウェブアプリにおける JavaScript と CSS の役割・規模・複雑度が年々ヤバいことになってきているのは今更言うまでもない。今や JavaScript は、モジュールごとに分割して TypeScript や次期仕様の ECMAscript といったいわゆる altJS で記述されたのち、変換 (Transpile)・結合 (Concatinate)・最小化 (Minify) されてリリースされる。&lt;/p&gt;
&lt;p&gt;ウェブアプリ開発において今時 (?) の言語を使う職場やコミュニティでは、フロントエンド絡みのビルドはある程度定着していることだろう。それには、&lt;a href=&quot;http://rubyonrails.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ruby on Rails&lt;/a&gt; における &lt;a href=&quot;https://github.com/rails/sprockets&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sprockets&lt;/a&gt; のような、フロントエンド開発をサポートする優れたライブラリの存在によって、手軽に方法論を取り入れることができたり、コミュニティ内に情報が流通する機会がもたらされていることにも関係があると思う。&lt;/p&gt;
&lt;h2 id=&quot;Java__u306E_u30D5_u30ED_u30F3_u30C8_u30A8_u30F3_u30C9_u4E8B_u60C5&quot;&gt;&lt;a href=&quot;#Java__u306E_u30D5_u30ED_u30F3_u30C8_u30A8_u30F3_u30C9_u4E8B_u60C5&quot; class=&quot;headerlink&quot; title=&quot;Java のフロントエンド事情&quot;&gt;&lt;/a&gt;Java のフロントエンド事情&lt;/h2&gt;&lt;p&gt;Java ウェブアプリ開発とフロントエンド開発を統合するためのツールや情報は少ない。&lt;/p&gt;
&lt;p&gt;あくまで自分のケースだが、周囲で見かける Java ウェブアプリのフロントエンド開発は、依然旧世代的だ。JavaScript にビルドという考えがあることを知らない開発者も多い。そんな現場での典型的なフロントエンド開発の運用は次のような感じになる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script src=&amp;quot;common.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; から始まる &lt;code&gt;script&lt;/code&gt; タグが10行以上並ぶ&lt;/li&gt;
&lt;li&gt;common.js からはグローバルネームスペースにいくつもの変数・関数がエクスポートされる&lt;/li&gt;
&lt;li&gt;common.js 以外に読み込んだページ固有スクリプトからもグローバルネームスペースへのエクスポートがある&lt;/li&gt;
&lt;li&gt;一つの巨大な JavaScript や CSS ファイルができる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;こうした運用は、コードの見通しを悪化させ、グローバル依存のコードを増やし、テストが放棄される。その結果、バグを生んでメンテナビリティを失う。&lt;/p&gt;
&lt;p&gt;もちろん Java に限ってのことではないのだが、情報が少なくてなんとも切ない状況にある言語であるのは事実だ。&lt;/p&gt;
&lt;h2 id=&quot;u30B7_u30F3_u30D7_u30EB_u306A_u30D5_u30ED_u30F3_u30C8_u30A8_u30F3_u30C9_u958B_u767A_u65B9_u6CD5_u304B_u3089_u306E_u7D71_u5408&quot;&gt;&lt;a href=&quot;#u30B7_u30F3_u30D7_u30EB_u306A_u30D5_u30ED_u30F3_u30C8_u30A8_u30F3_u30C9_u958B_u767A_u65B9_u6CD5_u304B_u3089_u306E_u7D71_u5408&quot; class=&quot;headerlink&quot; title=&quot;シンプルなフロントエンド開発方法からの統合&quot;&gt;&lt;/a&gt;シンプルなフロントエンド開発方法からの統合&lt;/h2&gt;&lt;p&gt;じゃあ、と意気込んでフロントエンド開発事情を調べてみれば、それはそれで混沌としていることが分かるだろう。npm、Bower、Grunt、gulp、Browserify、webpack、……。何かいろいろあって、うまく使うと驚くほど効率的な開発ができるようになるらしい。だが、まずはシンプルに始めたい。それなのにシンプルに始める方法を選ぶのが難しい。&lt;/p&gt;
&lt;p&gt;ずばり、シンプルさを重視すれば、&lt;a href=&quot;https://www.npmjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;npm&lt;/a&gt; と &lt;a href=&quot;http://browserify.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Browserify&lt;/a&gt; だけで始めるのがいい。&lt;/p&gt;
&lt;p&gt;まずは Java ウェブアプリのフロントエンド開発に npm と Browserify を使用するところから始めよう。その後はツールを追加して効率性を高めていこう。そんな開発ワークフローを体験するためのチュートリアルを作った。とにかく一度、フロントエンドのモダンな開発ワークフローを体験してもらいたい。&lt;/p&gt;
&lt;h2 id=&quot;Java_+__u30D5_u30ED_u30F3_u30C8_u30A8_u30F3_u30C9_u958B_u767A_u7D71_u5408_u30C1_u30E5_u30FC_u30C8_u30EA_u30A2_u30EB&quot;&gt;&lt;a href=&quot;#Java_+__u30D5_u30ED_u30F3_u30C8_u30A8_u30F3_u30C9_u958B_u767A_u7D71_u5408_u30C1_u30E5_u30FC_u30C8_u30EA_u30A2_u30EB&quot; class=&quot;headerlink&quot; title=&quot;Java + フロントエンド開発統合チュートリアル&quot;&gt;&lt;/a&gt;Java + フロントエンド開発統合チュートリアル&lt;/h2&gt;&lt;p&gt;チュートリアルでは次のサンプル Todo アプリを使用する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/keik/spring-frontend-integration-example&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/keik/spring-frontend-integration-example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;サンプルの動作・開発には次の環境が必要になる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JDK 8+&lt;/li&gt;
&lt;li&gt;Apache Maven 3+&lt;/li&gt;
&lt;li&gt;Node 4+&lt;/li&gt;
&lt;li&gt;Gnu Make&lt;/li&gt;
&lt;li&gt;Unix-like シェル環境 (Windows の場合 MSYS や Cygwin で可能)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このチュートリアルは Node をインストールしたことがないレベルの初心者でも始められる。逆に説明が冗長だと感じたら飛ばしながら進むといい。&lt;/p&gt;
&lt;h3 id=&quot;0-__u6BB5_u53D6_u308A&quot;&gt;&lt;a href=&quot;#0-__u6BB5_u53D6_u308A&quot; class=&quot;headerlink&quot; title=&quot;0. 段取り&quot;&gt;&lt;/a&gt;0. 段取り&lt;/h3&gt;&lt;p&gt;チュートリアルは次の5つのステップに分かれており、サンプルアプリの各コミットに対応する。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ベースとなるサーバアプリを用意する (&lt;a href=&quot;https://github.com/keik/spring-frontend-integration-example/tree/ab4b918acb30ac49d8b2ee63e6d59432ce3d4e25&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ab4b918&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;フロントエンド開発用のファイルレイアウトとビルドタスクを作る (&lt;a href=&quot;https://github.com/keik/spring-frontend-integration-example/tree/f985e88e0f925cb12bf013dd25e26b49c1cfd314&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;f985e88&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;自動ビルドタスクを追加して効率化する (&lt;a href=&quot;https://github.com/keik/spring-frontend-integration-example/tree/948cd78da0e418fc1d0e539275420942dd1db64b&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;948cd78&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;自動ビルドを活用して JavaScript を実装する (&lt;a href=&quot;https://github.com/keik/spring-frontend-integration-example/tree/132f9a5d932e9679732d06f8311ffe5ef5b5a372&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;132f9a5&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;CSS の自動ビルドタスクを作り、CSS を実装する (&lt;a href=&quot;https://github.com/keik/spring-frontend-integration-example/tree/1711f586b309d88e721f90b357ee1a0811719cf3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;1711f58&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;1-__u30D9_u30FC_u30B9_u3068_u306A_u308B_u30B5_u30FC_u30D0_u30A2_u30D7_u30EA_u3092_u7528_u610F_u3059_u308B&quot;&gt;&lt;a href=&quot;#1-__u30D9_u30FC_u30B9_u3068_u306A_u308B_u30B5_u30FC_u30D0_u30A2_u30D7_u30EA_u3092_u7528_u610F_u3059_u308B&quot; class=&quot;headerlink&quot; title=&quot;1. ベースとなるサーバアプリを用意する&quot;&gt;&lt;/a&gt;1. ベースとなるサーバアプリを用意する&lt;/h3&gt;&lt;p&gt;&lt;em&gt;対応するコミット: &lt;a href=&quot;https://github.com/keik/spring-frontend-integration-example/tree/ab4b918acb30ac49d8b2ee63e6d59432ce3d4e25&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ab4b918&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Spring Boot を使った簡単な Todo アプリを用意した。なお、Spring Boot でサーバアプリを実装するところについてはチュートリアルの本目的ではないので省略する。この段階のファイルレイアウトは以下のようになっている。&lt;/p&gt;
&lt;figure class=&quot;highlight md&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── README.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── todo-app                         ... for sources of a Spring Boot server app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    ├── pom.xml&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    └── src&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;        └── main&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;            ├── java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;            └── resources&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;                ├── application.yml&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;                ├── static&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;                └── templates&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Spring Boot は、組み込みサーバを起動してデプロイできる Maven ゴールが設定されている。次のコマンドで &lt;a href=&quot;http://localhost:8080/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:8080/&lt;/a&gt; にデプロイされる。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;% mvn spring-boot:run&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;まだ JavaScript は一切使用していない。以降の作業ではこれに JavaScript や CSS を加えてインタラクションと見栄えを整えていく。この段階での動作を確認しておくと以降のイメージがつかみやすいと思う。&lt;/p&gt;
&lt;h3 id=&quot;2-__u30D5_u30ED_u30F3_u30C8_u30A8_u30F3_u30C9_u958B_u767A_u7528_u306E_u30D5_u30A1_u30A4_u30EB_u30EC_u30A4_u30A2_u30A6_u30C8_u3068_u30D3_u30EB_u30C9_u30BF_u30B9_u30AF_u3092_u4F5C_u308B&quot;&gt;&lt;a href=&quot;#2-__u30D5_u30ED_u30F3_u30C8_u30A8_u30F3_u30C9_u958B_u767A_u7528_u306E_u30D5_u30A1_u30A4_u30EB_u30EC_u30A4_u30A2_u30A6_u30C8_u3068_u30D3_u30EB_u30C9_u30BF_u30B9_u30AF_u3092_u4F5C_u308B&quot; class=&quot;headerlink&quot; title=&quot;2. フロントエンド開発用のファイルレイアウトとビルドタスクを作る&quot;&gt;&lt;/a&gt;2. フロントエンド開発用のファイルレイアウトとビルドタスクを作る&lt;/h3&gt;&lt;p&gt;&lt;em&gt;対応するコミット: &lt;a href=&quot;https://github.com/keik/spring-frontend-integration-example/tree/f985e88e0f925cb12bf013dd25e26b49c1cfd314&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;f985e88&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;このステップでは、以下のファイルレイアウトになることを目指して作業を進めていく。&lt;/p&gt;
&lt;figure class=&quot;highlight md&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── README.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── todo-app                         ... for sources of a Spring Boot server app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│  ├── pom.xml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│  └── src&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│      └── main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│          ├── java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│          └── resources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│              ├── application.yml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│              ├── static&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│              │  └── bundle.js      ... built from todo-client/scripts/main.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│              └── templates&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── todo-client                      ... for sources of client resources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    ├── Makefile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    ├── package.json&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    └── scripts                      ... for sources of a JavaScript to bundle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;        └── main.js                  ... entry point of JavaScript&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;フロントエンド開発に使用するモジュールは、Node パッケージマネージャ npm を使用してインストールしていくのが基本になる。npm は Node に同梱されている。まずサーバアプリ開発用の todo-app ディレクトリと同じ階層に、フロントエンド開発用の todo-client ディレクトリを作成し、そこで npm を初期化しよう。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;% mkdir todo-client&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; todo-client&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% npm init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;すると対話形式でプロジェクト情報の入力を求められるが、さほど重要ではないし後で修正もできるため、適当に入力する。これが済むと package.json ファイルが作られる。このファイルは、Maven における pom.xml のような、npm にとっての依存パッケージ情報などを管理するためのものだ。&lt;/p&gt;
&lt;p&gt;次にこのプロジェクトで必要な npm パッケージをインストールする。モジュールごとに分割した JavaScript をビルドするために使用するツール Browserify は次のコマンドでインストールできる。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;% npm install browserify --save-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;--save-dev&lt;/code&gt; オプションをつけると、今インストールしたパッケージ名とバージョンが package.json 内に追記される。類似するオプションとして &lt;code&gt;--save&lt;/code&gt; というものもあり、package.json に追記されるフィールドが異なる。使い分け方としては、&lt;code&gt;--save-dev&lt;/code&gt; は開発時にのみ必要なツール (Browserify など) を、&lt;code&gt;--save&lt;/code&gt; はランタイムに必要なライブラリ (jQuery や Bootstrap など) を指定する。この package.json ファイルがある場所で &lt;code&gt;npm install&lt;/code&gt; コマンドを実行すると、package.json にある依存パッケージが自動的にまとめてインストールされるので、他のマシン環境でもコマンドを実行するだけで同じ依存パッケージを簡単に揃えることができる。&lt;/p&gt;
&lt;p&gt;npm でインストールしたパッケージは node_moduels ディレクトリ内に格納される。Browserify のような、コマンドラインツールを提供しているパッケージの場合、node_modules/.bin 以下に実行ファイルが配置されるので、次のように Browserify を起動してみよう。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;% node_modules/.bin/browserify -h&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ヘルプが表示されるはずだ。さっそく JavaScript ファイルを作って Browserify で変換してみよう。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;% mkdir scripts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;console.log(&quot;hi&quot;)&#39;&lt;/span&gt; &amp;gt; scripts/main.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% node_modules/.bin/browserify scripts/main.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;標準出力に表示されたものが変換後の JavaScript だ。&lt;/p&gt;
&lt;p&gt;今度は npm で jQuery をインストールし、これを読み込むコードを書いてみよう。それを変換し、サーバアプリの静的ファイル置き場に出力してみよう。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;% npm install jquery --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       var $ = require(&quot;jquery&quot;) // (1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       console.log($().jquery)   // (2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &#39;&lt;/span&gt; &amp;gt; scripts/main.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% mkdir ../todo-app/src/main/resources/static&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% node_modules/.bin/browserify scripts/main.js -o ../todo-app/src/main/resources/static/bundle.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;こうしてビルドした bundle.js は、jQuery 本体のコード (1) と &lt;code&gt;console.log&lt;/code&gt; で jQuery のバージョンを出力するコード (2) が結合された状態で出力される。これをサーバアプリの HTML テンプレート (todo-app/src/main/resources/templates/todos.html) で読み込むよう &lt;code&gt;script&lt;/code&gt; タグを追加し、ページをリロードしてみよう。開発者ツールのコンソールに jQuery のバージョンが出力されるはずだ。&lt;/p&gt;
&lt;p&gt;これが npm と Browserify による、最も基本的な JavaScript のビルド方法だ。&lt;/p&gt;
&lt;p&gt;あとは楽をするために工夫をするフェーズだ。これまで &lt;code&gt;npm&lt;/code&gt; や &lt;code&gt;mkdir&lt;/code&gt; や &lt;code&gt;browserify&lt;/code&gt; などのコマンドを、都度オプションを指定しながら直接実行してきた。これらのコマンド実行の流れを自動化する仕組みを Makefile で作っておくと便利だ。&lt;/p&gt;
&lt;figure class=&quot;highlight makefile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;STATIC_DIR&lt;/span&gt; = ../todo-app/src/main/resources/static&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;all: clean $(STATIC_DIR)/bundle.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$(STATIC_DIR)/bundle.js: node_modules $(STATIC_DIR)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@node_modules/.bin/browserify scripts/main.js -o $@&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$(STATIC_DIR):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@mkdir -p $@&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;clean:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@rm -rf &lt;span class=&quot;variable&quot;&gt;$(STATIC_DIR)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node_modules: package.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@npm install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;phony&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.PHONY&lt;/span&gt;: all clean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;開発に途中参加する開発者は、ソースコードと package.json がコミットされたリポジトリをクローンして &lt;code&gt;make&lt;/code&gt; さえすれば、他のコマンドを逐一実行しなくても、ビルドが完了するようになる。&lt;/p&gt;
&lt;p&gt;なお Make でなくとも、シェルスクリプトやバッチファイル、Java のエコシステムを使いたいというのなら Gradle や Ant でもいい。だが Maven ですべてを統合するというのはやめておこう。Maven との格闘が始まり、決して効率的にならないだろう。&lt;a href=&quot;https://github.com/eirslett/frontend-maven-plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;frontend-maven-plugin&lt;/a&gt; というのもあるが、タスクのカスタマイズが不自由になるのでオススメしない。&lt;/p&gt;
&lt;h3 id=&quot;3-__u81EA_u52D5_u30D3_u30EB_u30C9_u30BF_u30B9_u30AF_u3092_u8FFD_u52A0_u3057_u3066_u52B9_u7387_u5316_u3059_u308B&quot;&gt;&lt;a href=&quot;#3-__u81EA_u52D5_u30D3_u30EB_u30C9_u30BF_u30B9_u30AF_u3092_u8FFD_u52A0_u3057_u3066_u52B9_u7387_u5316_u3059_u308B&quot; class=&quot;headerlink&quot; title=&quot;3. 自動ビルドタスクを追加して効率化する&quot;&gt;&lt;/a&gt;3. 自動ビルドタスクを追加して効率化する&lt;/h3&gt;&lt;p&gt;&lt;em&gt;対応するコミット: &lt;a href=&quot;https://github.com/keik/spring-frontend-integration-example/tree/948cd78da0e418fc1d0e539275420942dd1db64b&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;948cd78&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Browserify によって JavaScript をビルドすることはできたが、JavaScript ファイルを編集するたびに &lt;code&gt;browserify&lt;/code&gt; を手動で実行し再ビルドするのは面倒だ。そこで今度は、ビルド対象およびビルド対象が読み込んでいるファイルが変更されたら、自動的にビルドしてくれるツール &lt;a href=&quot;https://github.com/substack/watchify&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;watchify&lt;/a&gt; を導入しよう。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;% npm install watchify --save-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;watchify の使い方は Browserify とほぼ同じだ。基本的には自動ビルドするかしないかだけの違いしかない。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;% node_modules/.bin/watchify scripts/main.js -o ../todo-app/src/main/resources/static/bundle.js -v -m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;追加した &lt;code&gt;-v&lt;/code&gt; オプションは、再ビルドの実行結果が標準出力するためのもので、動作状況を確認するために付けておいたほうが便利だ。&lt;code&gt;-d&lt;/code&gt; オプションは、変換後のファイルに TODO sourcemap をバンドルするためのもので、これによって Chrome デベロッパーツールなどで結合前のファイルが表示できるようになるためデバッグに便利だ。&lt;/p&gt;
&lt;p&gt;上のコマンドを実行した状態で、main.js に適当な編集を加えてみよう。自動的に再ビルドされ bundle.js が更新されるはずだ。再ビルドは思ったより早く終わることだろう。Node のストリームのパフォーマンスの素晴らしさに感動しよう。&lt;/p&gt;
&lt;p&gt;このコマンドのエイリアスも、Makefile に追加しておこう。&lt;/p&gt;
&lt;figure class=&quot;highlight makefile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;watch-js: node_modules $(STATIC_DIR)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@node_modules/.bin/watchify scripts/main.js -o &lt;span class=&quot;variable&quot;&gt;$(STATIC_DIR)&lt;/span&gt;/bundle.js -v -m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;これで &lt;code&gt;make watch-js&lt;/code&gt; を実行するだけで、インクリメンタルビルドが開始されるようになった。あとはガシガシ JavaScript を実装しよう。&lt;/p&gt;
&lt;h3 id=&quot;4-__u81EA_u52D5_u30D3_u30EB_u30C9_u3092_u6D3B_u7528_u3057_u3066_JavaScript__u3092_u5B9F_u88C5_u3059_u308B&quot;&gt;&lt;a href=&quot;#4-__u81EA_u52D5_u30D3_u30EB_u30C9_u3092_u6D3B_u7528_u3057_u3066_JavaScript__u3092_u5B9F_u88C5_u3059_u308B&quot; class=&quot;headerlink&quot; title=&quot;4. 自動ビルドを活用して JavaScript を実装する&quot;&gt;&lt;/a&gt;4. 自動ビルドを活用して JavaScript を実装する&lt;/h3&gt;&lt;p&gt;&lt;em&gt;対応するコミット: &lt;a href=&quot;https://github.com/keik/spring-frontend-integration-example/tree/132f9a5d932e9679732d06f8311ffe5ef5b5a372&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;132f9a5&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;このステップでは、以下のファイルレイアウトになることを目指して作業を進めていく。&lt;/p&gt;
&lt;figure class=&quot;highlight md&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── README.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── todo-app                         ... for sources of a Spring Boot server app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│  ├── pom.xml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│  └── src&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│      └── main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│          ├── java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│          └── resources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│              ├── application.yml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│              ├── static&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│              │  └── bundle.js      ... built from todo-client/scripts/main.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│              └── templates&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── todo-client                      ... for sources of client resources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    ├── Makefile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    ├── package.json&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    └── scripts                      ... for sources of a JavaScript to bundle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;        ├── main.js                  ... entry point of JavaScript&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;        └── page-specifics           ... for store page-specific scripts&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ステップ 3 で効率的にアプリを実装する準備ができたので、あとはひたすら実装する。Todo アプリの、Todo 追加・削除・完了を、AJax でサーバにリクエストするようにしよう。&lt;/p&gt;
&lt;p&gt;このステップでのポイントは、ページ固有のスクリプトの実装・管理方法だ。&lt;/p&gt;
&lt;p&gt;ページ固有スクリプトは、ページごとに分割して管理したい。最終的なリリースの仕方にはいくつかのパターンがあるが、今回はページ固有スクリプトも含めすべての JavaScript を一つのファイルにバンドルしてリリースすることにする。この場合、表示しているページ固有スクリプトだけが呼び出されるようにし、関係のないページ用スクリプトは呼び出されないようにする必要がある。これをうまくコントロールするためには、ページの &lt;code&gt;body&lt;/code&gt; 要素の ID を参照するというアイデアが有効だ。&lt;/p&gt;
&lt;p&gt;Todo 一覧ページ用の HTML テンプレート (todos.html) の &lt;code&gt;body&lt;/code&gt; 要素には &lt;code&gt;page-todos&lt;/code&gt; を付与しよう。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;page-todos&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;そして Todo 一覧ページ用スクリプトは scripts/page-specifics/todos.js に作成し、その中で &lt;code&gt;body&lt;/code&gt; の ID を参照して処理を呼び出すかどうかを判断するようにしよう。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// todo-client/scripts/page-specifics/todos.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.id === &lt;span class=&quot;string&quot;&gt;&#39;page-todos&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $(init)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;init&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// snips&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;これを main.js から読み込むようにする。Todo 一覧ページの他に新たなページが増えても、このように &lt;code&gt;body&lt;/code&gt; の ID を参照させる方法で追加していけばいい。なお、ローカルのファイルを &lt;code&gt;require&lt;/code&gt; する場合は、引数にファイルの相対パスを書き、&lt;code&gt;.js&lt;/code&gt; は省略可能だ。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// todo-client/scripts/main.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./page-specifics/todos&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;JavaScript のビルド環境・開発ワークフローについてはひとまずこれで完成だ。Ajax による Todo 操作の実装についてはただの jQuery を使った実装なので、サンプルのソースコードを確認してほしい。&lt;/p&gt;
&lt;p&gt;ところで今回のサンプルでは、ページ固有スクリプトしか作成しておらず、共通関数モジュールを定義していない。もし共通関数などをモジュール化する場合には、エクスポートしたい関数・オブジェクトなどを &lt;code&gt;module.exports&lt;/code&gt; に代入するようにする。例えば、&lt;code&gt;greet&lt;/code&gt; という関数を持つオブジェクトをエクスポートする場合は、次のように記述する。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// utils.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  greet: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;hi&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;このような &lt;code&gt;module.exports&lt;/code&gt; に代入のあるファイルを &lt;code&gt;require&lt;/code&gt; で読み込むと、戻り値として代入されたオブジェクトや関数が得られる。よって次のように読み込んで使うことができる。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// main.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; utils = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./utils&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;utils.greet()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上で作成したページ固有スクリプトのように、&lt;code&gt;module.exports&lt;/code&gt; に代入していないファイルを読み込んだ場合は、ファイルの頭から処理が呼び出される動作になる。&lt;/p&gt;
&lt;p&gt;この &lt;code&gt;module&lt;/code&gt; 変数や &lt;code&gt;require&lt;/code&gt; 関数によるモジュール管理は Node で使われている方式であり、CommonJS と呼ばれる。&lt;/p&gt;
&lt;h3 id=&quot;5-_CSS__u306E_u81EA_u52D5_u30D3_u30EB_u30C9_u30BF_u30B9_u30AF_u3092_u4F5C_u308A_u3001CSS__u3092_u5B9F_u88C5_u3059_u308B&quot;&gt;&lt;a href=&quot;#5-_CSS__u306E_u81EA_u52D5_u30D3_u30EB_u30C9_u30BF_u30B9_u30AF_u3092_u4F5C_u308A_u3001CSS__u3092_u5B9F_u88C5_u3059_u308B&quot; class=&quot;headerlink&quot; title=&quot;5. CSS の自動ビルドタスクを作り、CSS を実装する&quot;&gt;&lt;/a&gt;5. CSS の自動ビルドタスクを作り、CSS を実装する&lt;/h3&gt;&lt;p&gt;&lt;em&gt;対応するコミット: &lt;a href=&quot;https://github.com/keik/spring-frontend-integration-example/tree/1711f586b309d88e721f90b357ee1a0811719cf3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;1711f58&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;JavaScript と同じように、CSS の実装も効率化しよう。&lt;/p&gt;
&lt;p&gt;このステップでは、以下のファイルレイアウトになることを目指して作業を進めていく。&lt;/p&gt;
&lt;figure class=&quot;highlight md&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── README.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── todo-app                         ... for sources of a Spring Boot server app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│  ├── pom.xml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│  └── src&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│      └── main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│          ├── java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│          └── resources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│              ├── application.yml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│              ├── static&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│              │  ├── bundle.js      ... built from todo-client/scripts/main.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│              │  └── style.css      ... built from todo-client/styles/main.less&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│              └── templates&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── todo-client                      ... for sources of client resources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    ├── Makefile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    ├── package.json&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    ├── scripts                      ... for sources of a JavaScript to bundle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    │  ├── main.js                   ... entry point of JavaScript&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    │  └── page-specifics            ... for store page-specific scripts&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    └── styles                       ... for sources of a CSS to bundle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;        ├── main.less                ... entry point of CSS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;        └── page-specifics           ... for store page-specific styles&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;まず CSS をより便利に記述するための &lt;a href=&quot;http://less-ja.studiomohawk.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Less&lt;/a&gt; を導入する。公式ウェブサイトの紹介にあるように、Less は CSS 上で変数や演算、入れ子による記述を可能にしたようなものだ。Less は npm からインストール可能だ。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;% npm install less --save-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Less は &lt;code&gt;lessc&lt;/code&gt; というコマンドラインツールを提供している。&lt;code&gt;lessc&lt;/code&gt; に *.less ファイルを指定すると CSS が生成される。&lt;/p&gt;
&lt;p&gt;そして Less のビルドも自動ビルド化したい。指定したファイルの変更を検知して、任意のコマンドを実行するパッケージ &lt;a href=&quot;https://github.com/kimmobrunfeldt/chokidar-cli&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;chokidar-cli&lt;/a&gt; あるいは &lt;a href=&quot;https://github.com/keik/watchf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;watchf&lt;/a&gt; を導入しよう。chokidar-cli は有名だ。一方 watchf は変更されたファイル名をコマンドパートに埋め込むことができる。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;% npm install watchf --save-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Makefile に Less の手動ビルド・自動ビルドのタスクを追加しよう。&lt;/p&gt;
&lt;figure class=&quot;highlight makefile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;STATIC_DIR&lt;/span&gt; = ../todo-app/src/main/resources/static&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 手動ビルド&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$(STATIC_DIR)/style.css: node_modules $(STATIC_DIR)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@node_modules/.bin/lessc styles/main.less $@&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 自動ビルド&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;watch-less: node_modules $(STATIC_DIR)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@node_modules/.bin/watchf &lt;span class=&quot;string&quot;&gt;&quot;styles/**/*.less&quot;&lt;/span&gt; -c &lt;span class=&quot;string&quot;&gt;&quot;node_modules/.bin/lessc styles/main.less $(STATIC_DIR)/style.css&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;これで &lt;code&gt;make watch-less&lt;/code&gt; を実行すれば、Less が自動ビルドされるようになった。だが、&lt;code&gt;make watch-js&lt;/code&gt; も同じような自動ビルドタスクだ。これを別の端末で起動させておくのは面倒だ。&lt;/p&gt;
&lt;p&gt;よって、複数のタスクを並列実行する &lt;code&gt;watch&lt;/code&gt; タスクも追加しよう。&lt;/p&gt;
&lt;figure class=&quot;highlight makefile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;watch:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;variable&quot;&gt;$(MAKE)&lt;/span&gt; -j watch-js watch-less&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;これで &lt;code&gt;make watch&lt;/code&gt; すれば JavaScript も Less も自動ビルドされるようになる。他に並列実行したいプロセスが追加されたら、Makefile の &lt;code&gt;watch&lt;/code&gt; ターゲットに追加していけばいい。&lt;/p&gt;
&lt;h2 id=&quot;99-__u4ED6_u306B_u4F55_u304C_u3067_u304D_u308B_u304B&quot;&gt;&lt;a href=&quot;#99-__u4ED6_u306B_u4F55_u304C_u3067_u304D_u308B_u304B&quot; class=&quot;headerlink&quot; title=&quot;99. 他に何ができるか&quot;&gt;&lt;/a&gt;99. 他に何ができるか&lt;/h2&gt;&lt;p&gt;Java アプリとビルドを統合する際は、todo-app および todo-client ディレクトリのある階層に、&lt;code&gt;mvn -f todo-app/pom.xml&lt;/code&gt; と &lt;code&gt;make -C todo-client&lt;/code&gt; を実行するタスクを持った親 Makefile を配置すればいい。&lt;/p&gt;
&lt;p&gt;より効率的な開発のために、npm でインストールできる他のツールも活用していってほしい。カテゴリごとに便利なライブラリを紹介して終わりにしたい。&lt;/p&gt;
&lt;h3 id=&quot;u30DF_u30CB_u30D5_u30A1_u30A4&quot;&gt;&lt;a href=&quot;#u30DF_u30CB_u30D5_u30A1_u30A4&quot; class=&quot;headerlink&quot; title=&quot;ミニファイ&quot;&gt;&lt;/a&gt;ミニファイ&lt;/h3&gt;&lt;p&gt;リリースビルド時はミニファイをしたいので、JavaScript については &lt;a href=&quot;https://github.com/mishoo/UglifyJS2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UglifyJS2&lt;/a&gt; を、CSS については &lt;a href=&quot;https://github.com/less/less-plugin-clean-css&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;less-plugin-clean-css
&lt;/a&gt; を使うといい。&lt;/p&gt;
&lt;h3 id=&quot;u30B3_u30FC_u30C9_u5909_u63DB&quot;&gt;&lt;a href=&quot;#u30B3_u30FC_u30C9_u5909_u63DB&quot; class=&quot;headerlink&quot; title=&quot;コード変換&quot;&gt;&lt;/a&gt;コード変換&lt;/h3&gt;&lt;p&gt;JavaScript のソースに altJS などを使いたければ Browserify 時に追加の変換処理を加えるトランスフォーム (Browserify プラグイン) を使うといい。TypeScript や ECMAScript、CoffeeScript などから JavaScript に変換するものをはじめ、主要なトランスフォームは &lt;a href=&quot;https://github.com/substack/node-browserify/wiki/list-of-transforms&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/substack/node-browserify/wiki/list-of-transforms&lt;/a&gt; にリストされている。&lt;/p&gt;
&lt;h3 id=&quot;u30B3_u30FC_u30C9_u30C1_u30A7_u30C3_u30AF&quot;&gt;&lt;a href=&quot;#u30B3_u30FC_u30C9_u30C1_u30A7_u30C3_u30AF&quot; class=&quot;headerlink&quot; title=&quot;コードチェック&quot;&gt;&lt;/a&gt;コードチェック&lt;/h3&gt;&lt;p&gt;Makefile にコードチェック (Lint) タスクを設定し、&lt;code&gt;all&lt;/code&gt; ターゲットの依存に加えることで、コードチェックエラーがある場合にビルドを失敗させることができる。&lt;/p&gt;
&lt;p&gt;コードチェックには &lt;a href=&quot;http://eslint.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ESLint&lt;/a&gt; が機能性・使い勝手の両面からオススメだ。&lt;/p&gt;
&lt;h3 id=&quot;u30C6_u30B9_u30C8&quot;&gt;&lt;a href=&quot;#u30C6_u30B9_u30C8&quot; class=&quot;headerlink&quot; title=&quot;テスト&quot;&gt;&lt;/a&gt;テスト&lt;/h3&gt;&lt;p&gt;Makefile にテストタスクを設定し &lt;code&gt;all&lt;/code&gt; ターゲットの依存に加えることで、テスト失敗時にビルドを失敗させることができる。&lt;/p&gt;
&lt;p&gt;テストランナーは &lt;a href=&quot;https://mochajs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mocha&lt;/a&gt; や &lt;a href=&quot;https://github.com/substack/tape&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tape&lt;/a&gt; がシンプルでオススメだ。アサーションライブラリは &lt;a href=&quot;https://github.com/power-assert-js/power-assert&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;power-assert&lt;/a&gt; が便利だが、セットアップに手こずるようなら &lt;a href=&quot;http://chaijs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chai&lt;/a&gt; がシンプルだ。&lt;/p&gt;
&lt;h2 id=&quot;u6B21_u306E_u30B9_u30C6_u30C3_u30D7&quot;&gt;&lt;a href=&quot;#u6B21_u306E_u30B9_u30C6_u30C3_u30D7&quot; class=&quot;headerlink&quot; title=&quot;次のステップ&quot;&gt;&lt;/a&gt;次のステップ&lt;/h2&gt;&lt;p&gt;クライアント MVC フレームワークや仮想 DOM やサーバサイドレンダリングが待ち受けている。そう考えるとフロントエンドやっぱり結構難しい。ただ、このような技術がどんな場合にも求められるようになるのは当分先だと思うので、それまでのレベルの底上げとしてメンテナブルなフロントエンド開発を浸透させていきたい。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;ウェブアプリにおける JavaScript と CSS の役割・規模・複雑度が年々ヤバいことになってきているのは今更言うまでもない。今や JavaScript は、モジュールごとに分割して TypeScript や次期仕様の ECMAscript といったいわゆる altJ
    
    </summary>
    
    
      <category term="browserify" scheme="http://blog.keik.info/tags/browserify/"/>
    
      <category term="java" scheme="http://blog.keik.info/tags/java/"/>
    
      <category term="javascript" scheme="http://blog.keik.info/tags/javascript/"/>
    
      <category term="less" scheme="http://blog.keik.info/tags/less/"/>
    
      <category term="make" scheme="http://blog.keik.info/tags/make/"/>
    
      <category term="spring" scheme="http://blog.keik.info/tags/spring/"/>
    
      <category term="task-runner" scheme="http://blog.keik.info/tags/task-runner/"/>
    
  </entry>
  
  <entry>
    <title>オートコンプリートライブラリを作った話と UI 実装のテクニックについて</title>
    <link href="http://blog.keik.info/2016/02/22/release-ac-box/"/>
    <id>http://blog.keik.info/2016/02/22/release-ac-box/</id>
    <published>2016-02-22T13:49:25.000Z</published>
    <updated>2016-02-22T22:41:25.316Z</updated>
    
    <content type="html">&lt;p&gt;シンプルなオートコンプリートコンボボックス UI ライブラリ &lt;a href=&quot;https://github.com/keik/ac-box&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ac-box&lt;/a&gt; を作った。&lt;a href=&quot;http://keik.info/ac-box/examples/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;デモはこちら&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;u7279_u5FB4&quot;&gt;&lt;a href=&quot;#u7279_u5FB4&quot; class=&quot;headerlink&quot; title=&quot;特徴&quot;&gt;&lt;/a&gt;特徴&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;他の大きなライブラリに依存しない。スタンドアロン版ミニファイ済み 9KB。&lt;/li&gt;
&lt;li&gt;UI の位置は自動で fix される。ボーダや背景などの装飾部分は独自に定義する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;u4F7F_u3044_u65B9&quot;&gt;&lt;a href=&quot;#u4F7F_u3044_u65B9&quot; class=&quot;headerlink&quot; title=&quot;使い方&quot;&gt;&lt;/a&gt;使い方&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/keik/ac-box#readme&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;README&lt;/a&gt; を参照してください。&lt;/p&gt;
&lt;h2 id=&quot;Typeahead__u3068_u304B_jQuery_UI__u3068_u304B_u3042_u308B_u3051_u3069_uFF1F&quot;&gt;&lt;a href=&quot;#Typeahead__u3068_u304B_jQuery_UI__u3068_u304B_u3042_u308B_u3051_u3069_uFF1F&quot; class=&quot;headerlink&quot; title=&quot;Typeahead とか jQuery UI とかあるけど？&quot;&gt;&lt;/a&gt;Typeahead とか jQuery UI とかあるけど？&lt;/h2&gt;&lt;p&gt;jQuery に依存したくない。&lt;/p&gt;
&lt;h2 id=&quot;u301C_u3059_u308B_u6A5F_u80FD_u306F_u306A_u3044_u306E_uFF1F&quot;&gt;&lt;a href=&quot;#u301C_u3059_u308B_u6A5F_u80FD_u306F_u306A_u3044_u306E_uFF1F&quot; class=&quot;headerlink&quot; title=&quot;〜する機能はないの？&quot;&gt;&lt;/a&gt;〜する機能はないの？&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/keik/ac-box/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;issue&lt;/a&gt; にもらえれば対応できるかもしれないです。&lt;/p&gt;
&lt;h1 id=&quot;UI__u5B9F_u88C5_u306E_u30C6_u30AF_u30CB_u30C3_u30AF&quot;&gt;&lt;a href=&quot;#UI__u5B9F_u88C5_u306E_u30C6_u30AF_u30CB_u30C3_u30AF&quot; class=&quot;headerlink&quot; title=&quot;UI 実装のテクニック&quot;&gt;&lt;/a&gt;UI 実装のテクニック&lt;/h1&gt;&lt;p&gt;オートコンプリートは、シンプルな機能ながらも微妙に細かなインタラクションがあるため、UI 実装の練習になる。このライブラリでも使っている UI 実装のテクニックをいくつかメモした。興味のある方は参考にしてください。&lt;/p&gt;
&lt;h2 id=&quot;Flux&quot;&gt;&lt;a href=&quot;#Flux&quot; class=&quot;headerlink&quot; title=&quot;Flux&quot;&gt;&lt;/a&gt;Flux&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://facebook.github.io/flux/docs/overview.html#content&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flux&lt;/a&gt; アーキテクチャを実装している。&lt;a href=&quot;https://github.com/keik/ac-box/blob/master/src/event-emitter.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ミニマムな Event Emitter はこんな感じ&lt;/a&gt;。このライブラリだとストアの操作がほとんどないので、あまり意味はないけれど。&lt;/p&gt;
&lt;p&gt;Flux アーキテクチャは、MVC アーキテクチャの一つの例でしかない。ところが、最近は MVC アーキテクチャの派生系が次々に登場してきて、もうこれ何が MVC だかわかんねえなっていう状況の中、Observer Pattern + Command Pattern による MVC アーキテクチャに単一データフローという制約を加えたもの改めて Flux という名前で再定義した。そうすることでたびたび発生していた MVC カオスに巻き込まれるのを回避して、初学者にも混乱なく分かりやすく使い始められるという印象を受ける。&lt;/p&gt;
&lt;h2 id=&quot;View__u30B9_u30C6_u30FC_u30C8_u3068_u30EC_u30F3_u30C0_u30E9_u30FC_u306B_u3088_u308B_u63CF_u753B&quot;&gt;&lt;a href=&quot;#View__u30B9_u30C6_u30FC_u30C8_u3068_u30EC_u30F3_u30C0_u30E9_u30FC_u306B_u3088_u308B_u63CF_u753B&quot; class=&quot;headerlink&quot; title=&quot;View ステートとレンダラーによる描画&quot;&gt;&lt;/a&gt;View ステートとレンダラーによる描画&lt;/h2&gt;&lt;p&gt;UI の状態制御には、次のような、View ステートとレンダラーを使った実装方法がある。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;イベントハンドラ内で、次のような View ステートのプロパティを更新する&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// オートコンプリートメニュー開閉状態。input にフォーカスあたったら true にしたりする&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  isOpen: &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// input に設定する値。ESC でメニュー選択を中断したりしたいので、DOM 要素のプロパティ外にステートとして保持する&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  value: &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// オートコンプリートメニュー内でフォーカスがあたっている場所を表す数字。UP とか DOWN でインクリ / デクリメントする&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  focusedIndex: &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;その後レンダリング関数をコール。レンダリング関数は View ステートを参照して DOM 要素を更新する&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;この方式の場合、レンダリング関数が割とクソ実装な見栄えになってしまうことがある。それでも、そこそこ複雑なインタラクションのある UI を制御するにはこの方法がいい。&lt;/p&gt;
&lt;p&gt;対比として、イベントハンドラ内で直接 DOM 要素を更新する実装を考えた場合、連続的に発生するイベントに対して表示状態の一貫性が保てずに破綻しがちになる。例えば、&lt;code&gt;click&lt;/code&gt; イベントでメニューを選択するというイベントハンドラを実装する際、気持ちの上では &lt;code&gt;click&lt;/code&gt; のみ Listen したい。だが実際には &lt;code&gt;mousedown&lt;/code&gt; や &lt;code&gt;mouseup&lt;/code&gt; や &lt;code&gt;blur&lt;/code&gt; や &lt;code&gt;focus&lt;/code&gt; などのイベントが連続的に発生する。これらのイベントハンドラと整合させつつ描画を更新する場合に View ステートというクッションを挟むことで、制御がしやすくなる。オプションで動作にバリエーションをもたせるような場合にも拡張しやすい。&lt;/p&gt;
&lt;p&gt;そして View ステートから DOM 要素の更新を最小パッチで自動的に行うのが、我らがイケメン &lt;a href=&quot;https://facebook.github.io/react/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React&lt;/a&gt; なのでライブラリではなくアプリを作るなら React 使うといいと思う。他に &lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxJS&lt;/a&gt; も気になるが、まだ使ったことがない。&lt;/p&gt;
&lt;h2 id=&quot;u753B_u50CF_u3092_u4F7F_u308F_u306A_u3044&quot;&gt;&lt;a href=&quot;#u753B_u50CF_u3092_u4F7F_u308F_u306A_u3044&quot; class=&quot;headerlink&quot; title=&quot;画像を使わない&quot;&gt;&lt;/a&gt;画像を使わない&lt;/h2&gt;&lt;p&gt;メニュー展開状態を示すキャレットアイコンなどは CSS の &lt;code&gt;border&lt;/code&gt; プロパティで作り、画像は使っていない。外部アセットファイルを増やしたくないから。Bootstrap のキャレットもこうやって作られているし、割と定番なテクニック。&lt;/p&gt;
&lt;h2 id=&quot;u30C8_u30EC_u30FC_u30B9_u30ED_u30B0_u3092_u57CB_u3081_u8FBC_u3080&quot;&gt;&lt;a href=&quot;#u30C8_u30EC_u30FC_u30B9_u30ED_u30B0_u3092_u57CB_u3081_u8FBC_u3080&quot; class=&quot;headerlink&quot; title=&quot;トレースログを埋め込む&quot;&gt;&lt;/a&gt;トレースログを埋め込む&lt;/h2&gt;&lt;p&gt;UI 実装は、ユーザ操作とのインタラクションによってコールされる関数の順序性などを確認しながら行いたいもの。それにパフォーマンスも気になる。そこで、&lt;code&gt;console.log&lt;/code&gt; ではなく &lt;a href=&quot;https://github.com/visionmedia/debug&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;debug&lt;/a&gt; を使って各関数の頭にトレースログを埋め込むというのをオススメ。簡易なパフォーマンス計測やトレースログのフィルタやログの色分けなどができて便利。&lt;/p&gt;
&lt;p&gt;そしてリリースビルドには debug をバンドルしたくないので、&lt;a href=&quot;https://github.com/keik/undebuggify&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;undebuggify&lt;/a&gt; で debug 関連コードを除去するトランスフォームをすると具合がいい。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;シンプルなオートコンプリートコンボボックス UI ライブラリ &lt;a href=&quot;https://github.com/keik/ac-box&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ac-box&lt;/a&gt; を作った。&lt;a href=&quot;http://ke
    
    </summary>
    
    
      <category term="ac-box" scheme="http://blog.keik.info/tags/ac-box/"/>
    
      <category term="autocomplete" scheme="http://blog.keik.info/tags/autocomplete/"/>
    
      <category term="combobox" scheme="http://blog.keik.info/tags/combobox/"/>
    
      <category term="flux" scheme="http://blog.keik.info/tags/flux/"/>
    
      <category term="javascript" scheme="http://blog.keik.info/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>undebuggify リリースした</title>
    <link href="http://blog.keik.info/2016/02/18/release-undebuggify/"/>
    <id>http://blog.keik.info/2016/02/18/release-undebuggify/</id>
    <published>2016-02-18T14:18:57.000Z</published>
    <updated>2016-02-18T14:47:39.952Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/visionmedia/debug&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;debug&lt;/a&gt; を使用しているコードを AST を辿って削除する Browserify Transform モジュール &lt;a href=&quot;https://github.com/keik/undebuggify&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;undebuggify&lt;/a&gt; を作ったのでご活用ください。使用例は README.md に書いてあります。&lt;/p&gt;
&lt;h2 id=&quot;debug__u3063_u3066_u4F55&quot;&gt;&lt;a href=&quot;#debug__u3063_u3066_u4F55&quot; class=&quot;headerlink&quot; title=&quot;debug って何&quot;&gt;&lt;/a&gt;debug って何&lt;/h2&gt;&lt;p&gt;ロガー。個人的に JavaScript でトレースログを埋め込む際は &lt;code&gt;console.log&lt;/code&gt; ではなく debug を常用している。なぜなら&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ログを埋め込んだモジュールごとに異なる色で出力される&lt;/li&gt;
&lt;li&gt;前回ログ出力からの経過時間などが出力される&lt;/li&gt;
&lt;li&gt;環境変数をいじることで出力したいログを絞り込むことができる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;など便利な機能があるから。&lt;/p&gt;
&lt;h2 id=&quot;u306A_u305C_debug__u3092_u524A_u9664_u3059_u308B_u5FC5_u8981_u304C_u3042_u308B_u306E_u304B&quot;&gt;&lt;a href=&quot;#u306A_u305C_debug__u3092_u524A_u9664_u3059_u308B_u5FC5_u8981_u304C_u3042_u308B_u306E_u304B&quot; class=&quot;headerlink&quot; title=&quot;なぜ debug を削除する必要があるのか&quot;&gt;&lt;/a&gt;なぜ debug を削除する必要があるのか&lt;/h2&gt;&lt;p&gt;ウェブブラウザ向けスクリプトをリリースする際、ログ出力コードは削除しておきたい。第一にダサいし、また debug の 4KB のコードをバンドルしたくないから。&lt;/p&gt;
&lt;h2 id=&quot;debug__u3058_u3083_u306A_u304F_u3066_console-log__u4F7F_u3063_u3066_u3044_u308B_u3093_u3060_u3051_u3069&quot;&gt;&lt;a href=&quot;#debug__u3058_u3083_u306A_u304F_u3066_console-log__u4F7F_u3063_u3066_u3044_u308B_u3093_u3060_u3051_u3069&quot; class=&quot;headerlink&quot; title=&quot;debug じゃなくて console.log 使っているんだけど&quot;&gt;&lt;/a&gt;debug じゃなくて console.log 使っているんだけど&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/alanshaw/stripify&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stripify&lt;/a&gt; をご活用ください。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/visionmedia/debug&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;debug&lt;/a&gt; を使用しているコードを AST を辿って削除する Browserify Transform モジュ
    
    </summary>
    
    
      <category term="ast" scheme="http://blog.keik.info/tags/ast/"/>
    
      <category term="browserify" scheme="http://blog.keik.info/tags/browserify/"/>
    
      <category term="javascript" scheme="http://blog.keik.info/tags/javascript/"/>
    
      <category term="transform" scheme="http://blog.keik.info/tags/transform/"/>
    
  </entry>
  
  <entry>
    <title>Grunt や gulp のかわりに Make も使ってみよう</title>
    <link href="http://blog.keik.info/2016/02/16/frontend/"/>
    <id>http://blog.keik.info/2016/02/16/frontend/</id>
    <published>2016-02-16T12:00:00.000Z</published>
    <updated>2016-02-16T12:22:00.686Z</updated>
    
    <content type="html">&lt;p&gt;フロントエンド開発のタスクランナーとして Grunt や gulp、npm run-script なんかを使ってきたが、今は Make を使っている。フロントエンド分野ではあまり馴染みのないツールかもしれないが、必要十分な機能性と高い表現力のバランスの良さを実感し、一巡辿ってゴールにたどり着いた感がある。もっと流行ってほしい。&lt;/p&gt;
&lt;p&gt;Make は Makefile に定義したルールにしたがってビルドプロセスを実行する。しかし Makefile には独特な表現が多く、&lt;code&gt;$@&lt;/code&gt; とかのマクロはググりようがなくてちょっとしんどい。とはいえ、いきなり高度な使い方をしようと思わなければ簡単なので、以下を参考に導入してみてほしい。&lt;/p&gt;
&lt;h2 id=&quot;STEP_1-__u30B3_u30DE_u30F3_u30C9_u306E_u30A8_u30A4_u30EA_u30A2_u30B9_u3092_u66F8_u304F&quot;&gt;&lt;a href=&quot;#STEP_1-__u30B3_u30DE_u30F3_u30C9_u306E_u30A8_u30A4_u30EA_u30A2_u30B9_u3092_u66F8_u304F&quot; class=&quot;headerlink&quot; title=&quot;STEP 1. コマンドのエイリアスを書く&quot;&gt;&lt;/a&gt;STEP 1. コマンドのエイリアスを書く&lt;/h2&gt;&lt;p&gt;基本はただのエイリアスです。&lt;/p&gt;
&lt;h3 id=&quot;JavaScript__u3092_u30D3_u30EB_u30C9_u3059_u308B_u4F8B&quot;&gt;&lt;a href=&quot;#JavaScript__u3092_u30D3_u30EB_u30C9_u3059_u308B_u4F8B&quot; class=&quot;headerlink&quot; title=&quot;JavaScript をビルドする例&quot;&gt;&lt;/a&gt;JavaScript をビルドする例&lt;/h3&gt;&lt;p&gt;次の Makefile があるディレクトリで &lt;code&gt;make build&lt;/code&gt; コマンドを実行すれば &lt;a href=&quot;https://github.com/substack/browserify-website&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Browserify&lt;/a&gt; でのビルドが実行される。&lt;/p&gt;
&lt;figure class=&quot;highlight makefile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;build:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	node_modules/.bin/browserify src/main.js -o dist/bundle.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;なお &lt;code&gt;build&lt;/code&gt; というタスク名的な部分のことを &lt;strong&gt;ターゲット&lt;/strong&gt; という。&lt;/p&gt;
&lt;p&gt;ミニファイしたければ &lt;a href=&quot;https://github.com/mishoo/UglifyJS2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Uglify&lt;/a&gt; にパイプ、もしくは &lt;a href=&quot;https://github.com/hughsk/uglifyify&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;uglifyify&lt;/a&gt; トランスフォームすればいい。&lt;/p&gt;
&lt;figure class=&quot;highlight makefile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;build:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	node_modules/.bin/browserify src/main.js | \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	node_modules/.bin/uglifyjs -o dist/bundle.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ターゲットの部分には生成したいファイル名、例えば dist/bundle.js などを指定できる。そうした場合の Makefile は以下のように、コマンドは &lt;code&gt;make dist/bundle.js&lt;/code&gt; となり、自然言語的に理解しやすくなる。&lt;/p&gt;
&lt;figure class=&quot;highlight makefile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dist/bundle.js:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@node_modules/.bin/browserify src/main.js | \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	node_modules/.bin/uglifyjs -o dist/bundle.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;なおコマンド部のはじめに &lt;code&gt;@&lt;/code&gt; をつけてみたが、これは実行するコマンドを標準出力しないための記号。コマンドを確認したければつけないままで OK。&lt;/p&gt;
&lt;h3 id=&quot;JavaScript__u3092_u30A4_u30F3_u30AF_u30EA_u30E1_u30F3_u30BF_u30EB_u30D3_u30EB_u30C9_u3059_u308B_u4F8B&quot;&gt;&lt;a href=&quot;#JavaScript__u3092_u30A4_u30F3_u30AF_u30EA_u30E1_u30F3_u30BF_u30EB_u30D3_u30EB_u30C9_u3059_u308B_u4F8B&quot; class=&quot;headerlink&quot; title=&quot;JavaScript をインクリメンタルビルドする例&quot;&gt;&lt;/a&gt;JavaScript をインクリメンタルビルドする例&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/substack/watchify&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;watchify&lt;/a&gt; がそれ自身でインクリメンタルビルドする機能を持っているので、これを叩くだけ。&lt;/p&gt;
&lt;figure class=&quot;highlight makefile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;watch-js:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@node_modules/.bin/watchify src/main.js -o src/bundle.js -v -d&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;STEP_2-__u4F9D_u5B58_u30BF_u30FC_u30B2_u30C3_u30C8_u3092_u66F8_u304F&quot;&gt;&lt;a href=&quot;#STEP_2-__u4F9D_u5B58_u30BF_u30FC_u30B2_u30C3_u30C8_u3092_u66F8_u304F&quot; class=&quot;headerlink&quot; title=&quot;STEP 2. 依存ターゲットを書く&quot;&gt;&lt;/a&gt;STEP 2. 依存ターゲットを書く&lt;/h2&gt;&lt;p&gt;上の Makefile は本当にただのエイリアスに過ぎないので、次は &lt;strong&gt;依存ターゲット&lt;/strong&gt; を導入する。&lt;/p&gt;
&lt;p&gt;dist/bundle.js を生成するまでに必要な依存関係をリスト化してみると、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dist/bundle.js は&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;browserify&lt;/code&gt; や &lt;code&gt;uglifyjs&lt;/code&gt; コマンドが使用できなければ出力できない。つまり Browserify や Uglify などの Node モジュールが格納されている &lt;em&gt;node_modules ディレクトリの存在に依存&lt;/em&gt; している。&lt;/li&gt;
&lt;li&gt;dist/bundle.js は、 dist ディレクトリがないと出力できない。つまり &lt;em&gt;dist ディレクトリの存在に依存&lt;/em&gt; している。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;node_modules は&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;package.json ファイルを元に &lt;code&gt;npm install&lt;/code&gt; コマンドによって作られる。つまり &lt;em&gt;package.json ファイルの存在&lt;/em&gt; に依存している。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの依存関係の解決方法を Makefile で表現すると次のようになる。&lt;/p&gt;
&lt;figure class=&quot;highlight makefile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dist/bundle.js: node_modules dist&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@node_modules/.bin/browserify src/main.js | \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	node_modules/.bin/uglifyjs -o dist/bundle.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;dist:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@mkdir -p dist&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node_modules: package.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@npm install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;このとき &lt;code&gt;make dist/bundle.js&lt;/code&gt; を実行すると、必要な依存を自動的に解決してくれる。つまり、初めに node_modules の解決のため &lt;code&gt;npm install&lt;/code&gt; が実行され、次に dist の解決のため &lt;code&gt;mkdir -p dist&lt;/code&gt; が実行される。最後に dist/bundle.js が生成される。つまり &lt;code&gt;make dist/bundle.js&lt;/code&gt; コマンド一つを実行すれば、他のコマンドを覚えたり実行せずにビルドできる。&lt;/p&gt;
&lt;p&gt;しかもターゲットと依存ターゲットのファイルのタイムスタンプを比較し、更新が必要なければコマンドはスキップされる。例えば package.json よりも node_modules が新しければ、node_modules の更新は不要なので &lt;code&gt;npm install&lt;/code&gt; は実行されない。&lt;/p&gt;
&lt;h2 id=&quot;STEP_3-__u4ED6_u306E_u7D99_u7D9A_u30D7_u30ED_u30BB_u30B9_u3092_u4E26_u5217_u5B9F_u884C_u3059_u308B&quot;&gt;&lt;a href=&quot;#STEP_3-__u4ED6_u306E_u7D99_u7D9A_u30D7_u30ED_u30BB_u30B9_u3092_u4E26_u5217_u5B9F_u884C_u3059_u308B&quot; class=&quot;headerlink&quot; title=&quot;STEP 3. 他の継続プロセスを並列実行する&quot;&gt;&lt;/a&gt;STEP 3. 他の継続プロセスを並列実行する&lt;/h2&gt;&lt;p&gt;ウェブサーバ越しに動作・表示確認するために &lt;a href=&quot;https://github.com/indexzero/http-server&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http-server&lt;/a&gt; を起動したいとする。さらに RESTful API モックサーバ &lt;a href=&quot;https://github.com/typicode/json-server&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;json-server&lt;/a&gt; を起動したいとする。とりあえずそれぞれのプロセスの起動のためのターゲットを定義すると以下のようになる。&lt;/p&gt;
&lt;figure class=&quot;highlight makefile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;run-dev-server: node_modules&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@node_modules/.bin/http-server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;run-api-mock-server: node_modules&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@node_modules/.bin/json-server --watch db.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;watch-js:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@node_modules/.bin/watchify src/main.js -o src/bundle.js -v -d&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;これらのプロセスは並列に実行したいもの。そんな時は Make の &lt;code&gt;j&lt;/code&gt; オプションでパラレル実行できるので、&lt;code&gt;make -j run-dev-server run-api-mock-server watch-js&lt;/code&gt; のようなコマンドを実行するといい。とはいえこのコマンドを毎回叩くのは面倒なので、これを更に Makefile に定義しておく。&lt;/p&gt;
&lt;figure class=&quot;highlight makefile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;watch:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@make -j run-dev-server run-api-mock-server watch-js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;こうすれば、&lt;code&gt;make watch&lt;/code&gt; すれば、3つのプロセスがパラレル実行される。仮にエラーでどれかのタスクが停止しても、Make のプロセスを止めればすべてのプロセスが止まるので、バックグラウンドでプロセスが残り続ける心配もない。npm run-script などで &lt;code&gt;&amp;amp;&lt;/code&gt; 区切りで実行すると、バックグラウンドプロセスが残りやすいので、これは便利。&lt;/p&gt;
&lt;h2 id=&quot;STEP_4-__u5909_u6570_u3068_u304B_u30DE_u30AF_u30ED_u3068_u304B_u95A2_u6570_u3068_u304B_u4F7F_u3046&quot;&gt;&lt;a href=&quot;#STEP_4-__u5909_u6570_u3068_u304B_u30DE_u30AF_u30ED_u3068_u304B_u95A2_u6570_u3068_u304B_u4F7F_u3046&quot; class=&quot;headerlink&quot; title=&quot;STEP 4. 変数とかマクロとか関数とか使う&quot;&gt;&lt;/a&gt;STEP 4. 変数とかマクロとか関数とか使う&lt;/h2&gt;&lt;p&gt;ここまでの内容で十分に便利に使えるが、Makefile らしさを出すために以降では簡単なマクロを使う例を紹介する。ただししんどくなってきたら本末転倒なのでやめよう。&lt;/p&gt;
&lt;p&gt;はじめのほうに書いた次の Makefile は、&lt;/p&gt;
&lt;figure class=&quot;highlight makefile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dist/bundle.js:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@node_modules/.bin/browserify src/main.js | \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	node_modules/.bin/uglifyjs -o dist/bundle.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;次の様に書き換えることができる。&lt;/p&gt;
&lt;figure class=&quot;highlight makefile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;SRC&lt;/span&gt;       = src&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;DIST&lt;/span&gt;      = dist&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;MAIN_JS&lt;/span&gt;   = &lt;span class=&quot;variable&quot;&gt;$(SRC)&lt;/span&gt;/main.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;BUNDLE_JS&lt;/span&gt; = &lt;span class=&quot;variable&quot;&gt;$(DIST)&lt;/span&gt;/bundle.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$(BUNDLE_JS):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@node_modules/.bin/browserify &lt;span class=&quot;variable&quot;&gt;$(MAIN_JS)&lt;/span&gt; | \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	node_modules/.bin/uglifyjs -o $@&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;変数定義 &lt;code&gt;VAR=foo&lt;/code&gt; と参照 &lt;code&gt;$(VAR)&lt;/code&gt;、更にターゲット名を表すマクロ &lt;code&gt;$@&lt;/code&gt; を導入した。&lt;/p&gt;
&lt;h2 id=&quot;28_u756A_u5916_29_STEP_5-_Windows__u5BFE_u5FDC&quot;&gt;&lt;a href=&quot;#28_u756A_u5916_29_STEP_5-_Windows__u5BFE_u5FDC&quot; class=&quot;headerlink&quot; title=&quot;(番外) STEP 5. Windows 対応&quot;&gt;&lt;/a&gt;(番外) STEP 5. Windows 対応&lt;/h2&gt;&lt;p&gt;Windows よくわからないけど、MinGW とか使ってほしい。コマンドプロンプトでは諦めてほしい。こんな感じで &lt;code&gt;/&lt;/code&gt; を &lt;code&gt;\&lt;/code&gt; に置換する関数を使うといけたりもする。&lt;strong&gt;諦めてほしい&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight makefile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ifdef SystemRoot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fixPath = &lt;span class=&quot;variable&quot;&gt;$(subst /,\,$1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fixPath = $1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$(call fixPath,dist/bundle.js):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@&lt;span class=&quot;variable&quot;&gt;$(call fixPath,node_modules/.bin/browserify src/main.js -o dist/bundle.js)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Grunt_2C_gulp_2C_npm_run-script__u3068_u306E_u6BD4_u8F03&quot;&gt;&lt;a href=&quot;#Grunt_2C_gulp_2C_npm_run-script__u3068_u306E_u6BD4_u8F03&quot; class=&quot;headerlink&quot; title=&quot;Grunt, gulp, npm run-script との比較&quot;&gt;&lt;/a&gt;Grunt, gulp, npm run-script との比較&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Grunt 遅い、タスク定義が面倒。&lt;/li&gt;
&lt;li&gt;gulp 早いけどタスク定義が面倒。&lt;/li&gt;
&lt;li&gt;Grunt も gulp も、プラグイン化が必要。バージョンアップ追従のタイムラグや、中にはメンテナンスされなくなるものもあるので、プラグイン化されたものではなく生で使えるに越したことはない。&lt;/li&gt;
&lt;li&gt;npm run-script は表現力が足りない。簡単なタスクならいいが、マルチラインやコメントが書けないので複雑なタスクは無理。&lt;/li&gt;
&lt;li&gt;シェルスクリプトもいいけど、一貫したプラクティスを提供する Make のほうが乗っかりやすい。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;u30B5_u30F3_u30D7_u30EB&quot;&gt;&lt;a href=&quot;#u30B5_u30F3_u30D7_u30EB&quot; class=&quot;headerlink&quot; title=&quot;サンプル&quot;&gt;&lt;/a&gt;サンプル&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/keik/frontend-with-make&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/keik/frontend-with-make&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone https://github.com/keik/frontend-with-make.git&lt;/code&gt; して &lt;code&gt;make&lt;/code&gt; すれば依存パッケージのインストールやら何やらができるはず。Makefile 活用例のサンプルなので、アプリ部分のショボさは無視してください。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;フロントエンド開発のタスクランナーとして Grunt や gulp、npm run-script なんかを使ってきたが、今は Make を使っている。フロントエンド分野ではあまり馴染みのないツールかもしれないが、必要十分な機能性と高い表現力のバランスの良さを実感し、一巡辿っ
    
    </summary>
    
    
      <category term="javascript" scheme="http://blog.keik.info/tags/javascript/"/>
    
      <category term="make" scheme="http://blog.keik.info/tags/make/"/>
    
      <category term="task-runner" scheme="http://blog.keik.info/tags/task-runner/"/>
    
  </entry>
  
  <entry>
    <title>slickgrid-colgroup-plugin 作った</title>
    <link href="http://blog.keik.info/2015/12/17/slickgrid-colgroup-plugin/"/>
    <id>http://blog.keik.info/2015/12/17/slickgrid-colgroup-plugin/</id>
    <published>2015-12-17T13:11:00.000Z</published>
    <updated>2016-02-18T14:18:08.251Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/mleibman/SlickGrid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SlickGrid&lt;/a&gt; のヘッダをグループ化するプラグイン &lt;a href=&quot;https://github.com/keik/slickgrid-colgroup-plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;slickgrid-colgroup-plugin&lt;/a&gt; を作ったので、ギョームシステムの開発とかにどうぞ。MIT。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://keik.github.io/slickgrid-colgroup-plugin/examples/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;デモページ&lt;/a&gt; にいくつかのサンプルを置いてます。&lt;/p&gt;
&lt;p&gt;SlickGrid 自体についても簡単に紹介すると、大量のデータをグリッドで表示できることを特徴としたフレームワークで、その仕組としてはスクロールされるたびに表示領域の DOM 要素だけを動的に作り直すことによって大量データを少ない DOM 要素数で表現している。&lt;/p&gt;
&lt;p&gt;プラグイン v1.0.4 における使い方は、SlickGrid オブジェクトにプラグインを登録して&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;grid.registerPlugin(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Slick.Plugins.ColGroup());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;カラム定義で &lt;code&gt;children&lt;/code&gt; プロパティを用いてグループ構造を持ったカラム定義を与えるだけ。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; columns = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;id: &lt;span class=&quot;string&quot;&gt;&#39;col1&#39;&lt;/span&gt;, name: &lt;span class=&quot;string&quot;&gt;&#39;col 1&#39;&lt;/span&gt;, children: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;id: &lt;span class=&quot;string&quot;&gt;&#39;col1-1&#39;&lt;/span&gt;, name: &lt;span class=&quot;string&quot;&gt;&#39;col 1-1&#39;&lt;/span&gt;, field: &lt;span class=&quot;string&quot;&gt;&#39;col1-1&#39;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;id: &lt;span class=&quot;string&quot;&gt;&#39;col1-2&#39;&lt;/span&gt;, name: &lt;span class=&quot;string&quot;&gt;&#39;col 1-2&#39;&lt;/span&gt;, field: &lt;span class=&quot;string&quot;&gt;&#39;col1-2&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ]&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;id: &lt;span class=&quot;string&quot;&gt;&#39;col2&#39;&lt;/span&gt;, name: &lt;span class=&quot;string&quot;&gt;&#39;col 2&#39;&lt;/span&gt;, children: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;id: &lt;span class=&quot;string&quot;&gt;&#39;col2-1&#39;&lt;/span&gt;, name: &lt;span class=&quot;string&quot;&gt;&#39;col 2-1&#39;&lt;/span&gt;, field: &lt;span class=&quot;string&quot;&gt;&#39;col2-1&#39;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;id: &lt;span class=&quot;string&quot;&gt;&#39;col2-2&#39;&lt;/span&gt;, name: &lt;span class=&quot;string&quot;&gt;&#39;col 2-2&#39;&lt;/span&gt;, children: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#123;id: &lt;span class=&quot;string&quot;&gt;&#39;col2-2-1&#39;&lt;/span&gt;, name: &lt;span class=&quot;string&quot;&gt;&#39;col 2-2-1&#39;&lt;/span&gt;, field: &lt;span class=&quot;string&quot;&gt;&#39;col2-2-1&#39;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#123;id: &lt;span class=&quot;string&quot;&gt;&#39;col2-2-2&#39;&lt;/span&gt;, name: &lt;span class=&quot;string&quot;&gt;&#39;col 2-2-2&#39;&lt;/span&gt;, field: &lt;span class=&quot;string&quot;&gt;&#39;col2-2-2&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ]&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/mleibman/SlickGrid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SlickGrid&lt;/a&gt; のヘッダをグループ化するプラグイン &lt;a href=&quot;https://github.co
    
    </summary>
    
    
      <category term="javascript" scheme="http://blog.keik.info/tags/javascript/"/>
    
      <category term="slickgrid" scheme="http://blog.keik.info/tags/slickgrid/"/>
    
  </entry>
  
</feed>
